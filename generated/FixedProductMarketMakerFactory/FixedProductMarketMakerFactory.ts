// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FixedProductMarketMakerCreation extends ethereum.Event {
  get params(): FixedProductMarketMakerCreation__Params {
    return new FixedProductMarketMakerCreation__Params(this);
  }
}

export class FixedProductMarketMakerCreation__Params {
  _event: FixedProductMarketMakerCreation;

  constructor(event: FixedProductMarketMakerCreation) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFactory(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get conditionalTokens(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get collateralToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get conditionId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FixedProductMarketMakerFactory extends ethereum.SmartContract {
  static bind(address: Address): FixedProductMarketMakerFactory {
    return new FixedProductMarketMakerFactory(
      "FixedProductMarketMakerFactory",
      address
    );
  }

  createFixedProductMarketMaker(
    lpTokenName: string,
    lpTokenSymbol: string,
    _fee: BigInt,
    _questionId: Bytes
  ): Address {
    let result = super.call(
      "createFixedProductMarketMaker",
      "createFixedProductMarketMaker(string,string,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(lpTokenName),
        ethereum.Value.fromString(lpTokenSymbol),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromFixedBytes(_questionId)
      ]
    );

    return result[0].toAddress();
  }

  try_createFixedProductMarketMaker(
    lpTokenName: string,
    lpTokenSymbol: string,
    _fee: BigInt,
    _questionId: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createFixedProductMarketMaker",
      "createFixedProductMarketMaker(string,string,uint256,bytes32):(address)",
      [
        ethereum.Value.fromString(lpTokenName),
        ethereum.Value.fromString(lpTokenSymbol),
        ethereum.Value.fromUnsignedBigInt(_fee),
        ethereum.Value.fromFixedBytes(_questionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAddressByQuestionId(_questionId: Bytes): Address {
    let result = super.call(
      "getAddressByQuestionId",
      "getAddressByQuestionId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_questionId)]
    );

    return result[0].toAddress();
  }

  try_getAddressByQuestionId(_questionId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressByQuestionId",
      "getAddressByQuestionId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_questionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConditonalTokensAddress(): Address {
    let result = super.call(
      "getConditonalTokensAddress",
      "getConditonalTokensAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getConditonalTokensAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getConditonalTokensAddress",
      "getConditonalTokensAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFpmmAddress(): Array<Address> {
    let result = super.call(
      "getFpmmAddress",
      "getFpmmAddress():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getFpmmAddress(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFpmmAddress",
      "getFpmmAddress():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTotalValue(): BigInt {
    let result = super.call("getTotalValue", "getTotalValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalValue",
      "getTotalValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _collateralTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _conditionalTokensAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateFixedProductMarketMakerCall extends ethereum.Call {
  get inputs(): CreateFixedProductMarketMakerCall__Inputs {
    return new CreateFixedProductMarketMakerCall__Inputs(this);
  }

  get outputs(): CreateFixedProductMarketMakerCall__Outputs {
    return new CreateFixedProductMarketMakerCall__Outputs(this);
  }
}

export class CreateFixedProductMarketMakerCall__Inputs {
  _call: CreateFixedProductMarketMakerCall;

  constructor(call: CreateFixedProductMarketMakerCall) {
    this._call = call;
  }

  get lpTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get lpTokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _fee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _questionId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CreateFixedProductMarketMakerCall__Outputs {
  _call: CreateFixedProductMarketMakerCall;

  constructor(call: CreateFixedProductMarketMakerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
